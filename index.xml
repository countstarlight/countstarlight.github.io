<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>首页 on Codist</title>
    <link>https://blog.codist.me/</link>
    <description>Recent content in 首页 on Codist</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 26 Jul 2017 20:41:02 +0800</lastBuildDate>
    
	<atom:link href="https://blog.codist.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>安装kaldi</title>
      <link>https://blog.codist.me/asr/kaldi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.codist.me/asr/kaldi/</guid>
      <description>1.环境 操作系统建议使用ubuntu，因为源里已经有编译好的一些依赖库，如ATLAS，安装不会遇到太多问题。
需要安装有git和make以及gcc等编译工具链
2.从源码安装 1.下载源码：
git clone https://github.com/kaldi-asr/kaldi.git  安装文档在kaldi/tools/INSTALL，很短，建议阅读一下
2.检查依赖和安装：
#检查依赖，如有问题参照仔细修改 ./extras/check_dependencies.sh #自动下载安装依赖 make -j 8  这会安装ATLAS headers, OpenFst, SCTK 和 sph2pipe
3.由于ATLAS安装复杂，使用OpenBLAS：
./extras/install_openblas.sh  4.根据安装文档下载编译依赖(这里使用OpenBLAS)，需要硬盘上有20G的空闲空间：
./configure --openblas-root=../tools/OpenBLAS/install make depend -j 8 make -j 8  这样就已经编译好训练需要的工具，之后进行在线解码和处理一些数据集需要额外安装一些工具</description>
    </item>
    
    <item>
      <title>搭建博客评论系统</title>
      <link>https://blog.codist.me/selfhost/commento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.codist.me/selfhost/commento/</guid>
      <description>在Debian9上用开源的Commento搭建博客评论系统
安装 yarn：
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - echo &amp;quot;deb https://dl.yarnpkg.com/debian/ stable main&amp;quot; | sudo tee /etc/apt/sources.list.d/yarn.list sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install yarn  安装dep（需要已经配置好的go环境）：
go get -u github.com/golang/dep/cmd/dep export PATH=$PATH:$GOPATH/bin  下载&amp;amp;编译：
mkdir -p $GOPATH/gitlab.com/commento cd $GOPATH/gitlab.com/commento git clone https://gitlab.com/commento/commento.git make prod  在根目录下新建脚本server.sh：
#! /bin/bash # 绑定的域名 export COMMENTO_ORIGIN=https://comment.example.com # 绑定的端口，可以用nginx反向代理到这个端口 export COMMENTO_PORT=8002 # 数据库 PostgreSQL 设置 export COMMENTO_POSTGRES=postgres://postgres:password@127.0.0.1:5432/comment?sslmode=disable # 关闭注册，首次需要注册账号，之后可以关闭注册 #export COMMENTO_FORBID_NEW_OWNERS=true # # github oauth，其他类似 # export GITHUB_KEY= export GITHUB_SECRET= .</description>
    </item>
    
    <item>
      <title>使用thchs30数据集</title>
      <link>https://blog.codist.me/asr/thchs30/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.codist.me/asr/thchs30/</guid>
      <description>1.下载数据集 Kaldi中文语音识别公共数据集有：
 1.aishell：AI SHELL公司开源178小时中文语音语料及基本训练脚本，见kaldi-master/egs/aishell
 2.gale_mandarin：中文新闻广播数据集(LDC2013S08, LDC2013S08）
 3.hkust：中文电话数据集(LDC2005S15, LDC2005T32)
 4.thchs30：清华大学30小时的数据集，可以在http://www.openslr.org/18/ 下载
  这里采用thchs30，从http://www.openslr.org/18/ 或者参照它的README下载三个压缩包：
 data_thchs30.tgz 6.4G Mirrors: China
 test-noise.tgz 1.9G Mirrors: China
 resource.tgz 24M Mirrors: China
  在egs/thchs30/s5下新建文件夹thchs30-openslr，把三个文件解压在该文件夹下
这个数据集包含以下内容：
   数据集 音频时长(h) 句子数 词数     train(训练) 25 10000 198252   dev(开发) 2:14 893 17743   test(测试) 6:15 2495 49085    还有训练好的语言模型word.3gram.lm和phone.3gram.lm以及相应的词典lexicon.txt。
其中dev的作用是在某些步骤与train进行交叉验证的，如local/nnet/run_dnn.sh同时用到exp/tri4b_ali和exp/tri4b_ali_cv。训练和测试的目标数据也分为两类：word（词）和phone（音素）。</description>
    </item>
    
    <item>
      <title>用minicom通过串口发送文件</title>
      <link>https://blog.codist.me/embedded/work6/</link>
      <pubDate>Wed, 26 Jul 2017 20:41:02 +0800</pubDate>
      
      <guid>https://blog.codist.me/embedded/work6/</guid>
      <description>1. 设置文件路径  设置需要传送的文件所在的路径
 按下组合键 Ctrl + A , 再按下 O
 选择 Filenames and paths：
    设置 A-Download directory （将文件从设备传送到本地的路径）
 设置 B-Upload directory （将文件从本地上传到设备的路径）向设备发送文件时，选择这个目录里的文件。
 按下 esc 然后选择 Save setup as dfl来保存设置：
  2. 发送文件到设备  在minicom里（已经连接到设备的终端）
rx filename  按下组合键 Ctrl + A，然后按下S
 选择 xmodem
 选择要发送的文件
  3. 在设备上运行刚才发送过去的文件（假设是Qt图形界面程序） 在minicom里（已经连接到设备的终端）：
chmod +x filename #给文件授予执行权限 ./filename #运行  如果设备上的系统没有图形化环境 添加参数 -qws：</description>
    </item>
    
    <item>
      <title>Qt Creator 配置交叉编译</title>
      <link>https://blog.codist.me/embedded/work5/</link>
      <pubDate>Wed, 26 Jul 2017 09:11:37 +0800</pubDate>
      
      <guid>https://blog.codist.me/embedded/work5/</guid>
      <description>1. 获取对应的交叉编译工具链 假设目标平台的处理器是 imx28，则相应的工具链为 arm-fsl-linux-gnueabi</description>
    </item>
    
    <item>
      <title>Linux上通过串口连接嵌入式Linux终端</title>
      <link>https://blog.codist.me/embedded/work4/</link>
      <pubDate>Tue, 25 Jul 2017 09:38:52 +0800</pubDate>
      
      <guid>https://blog.codist.me/embedded/work4/</guid>
      <description>1. 安装 minicom Debian/Ubuntu：
sudo aptitude update sudo aptitude install minicom  2. 插上设备并查看系统是否已经检测到设备 sudo dmesg | grep tty  如果没有检测到设备，得到的结果类似： [ 0.000000] console [tty0] enabled [ 8.264501] systemd[1]: Created slice system-getty.slice.   拔下usb转串口线，输入命令 lsusb会看到一些已经连接到usb的设备：
Bus 002 Device 002: ID 8087:8000 Intel Corp. Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 001 Device 002: ID 8087:8008 Intel Corp. Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.</description>
    </item>
    
    <item>
      <title>Linux上摄像设备的使用</title>
      <link>https://blog.codist.me/linux/work3/</link>
      <pubDate>Thu, 20 Jul 2017 14:54:35 +0800</pubDate>
      
      <guid>https://blog.codist.me/linux/work3/</guid>
      <description>在Linux上配置网络摄像头，用到的一些软件，以及如何录制和播放设备的视频输入
1. 查找设备  插上摄像设备（通常是通过USB）
 列出所有的 video4linux 设备:
ls -ltr /dev/video*  得到的输出类似于：
crw-rw----+ 1 root video 81, 0 Nov 11 09:06 /dev/video0   这里的摄像设备名称是 */dev/video0*，如果没有看到任何 /dev/video 文件，查看#排查问题。如果有多个 video4linux 设备，比如是一个tv card，摄像头设备应该显示为 /dev/video1 或类似的。但它的时间（在这个例子中是 Nov 11 09:06）应该是你插上它的时间。
2.测试设备  如果安装有 vlc，可以启动它，选择 Media -&amp;gt; Open Capture Device -&amp;gt; Video device name = /dev/video0 -&amp;gt; Play
 如果安装有mplayer，可以使用：
mplayer tv:// -tv driver=v4l2:width=640:height=480:device=/dev/video0 -fps 30   3.使用设备 3.1录制视频 要捕获设备的视频输入，可以使用 cheese，一个不错的图形界面软件，你可以用它边看边录制设备的视频输入，录制保存的文件格式不太常见(.webm)，但用vlc可以播放。</description>
    </item>
    
    <item>
      <title>Math Sample</title>
      <link>https://blog.codist.me/android/work8/</link>
      <pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.codist.me/android/work8/</guid>
      <description>&lt;p&gt;KaTeX can be used to generate complex math formulas server-side.&lt;/p&gt;

&lt;p&gt;$$
\phi = \frac{(1+\sqrt{5})}{2} = 1.6180339887\cdots
$$&lt;/p&gt;

&lt;p&gt;Additional details can be found on &lt;a href=&#34;https://github.com/Khan/KaTeX&#34;&gt;GitHub&lt;/a&gt; or on the &lt;a href=&#34;http://tiddlywiki.com/plugins/tiddlywiki/katex/&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android&#39;s selinux</title>
      <link>https://blog.codist.me/android/work2/</link>
      <pubDate>Sat, 05 Nov 2016 19:41:01 +0530</pubDate>
      
      <guid>https://blog.codist.me/android/work2/</guid>
      <description>&lt;h2 id=&#34;一-适用情景&#34;&gt;一、适用情景&lt;/h2&gt;

&lt;p&gt;当在init.rc中新增service：&lt;/p&gt;

&lt;p&gt;service ro_isn /system/bin/isn.sh class late_start user root Oneshot&lt;/p&gt;

&lt;p&gt;kernel log会打印以下log：&lt;/p&gt;

&lt;p&gt;Warning! Service ro_isn needs a SELinux domain defined; please fix!&lt;/p&gt;

&lt;p&gt;这是因为Service ro_isn没有在SELinux的监控之下，这种情况会提示你定义一个SELinux。&lt;/p&gt;

&lt;p&gt;在这种情况下，你可以：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>将Android的系统日志输出到文件</title>
      <link>https://blog.codist.me/android/work1/</link>
      <pubDate>Sat, 11 Jun 2016 19:00:10 +0800</pubDate>
      
      <guid>https://blog.codist.me/android/work1/</guid>
      <description>首先，在产品目录的init.XXX.rc文件中，添加相应的service，
#start log service start logd on property:service.logcat.enable=1 start logcat_service on property:service.logcat.enable=0 stop logcat_service #log services service logcat_service /system/bin/logcat -b system -b events -b main -b radio -k -n 10 -v threadtime -r5000 -f /data/Logs/Log.0/logcat.log user root group log system class main disabled service logd /system/bin/sh /system/bin/logd.sh user system group log oneshot  然后，在目标平台的system/bin下添加脚本文件logd.sh，处理存储的log日志，以及设置属性，开启logcat_service,
#!/system/bin/sh # #Global folder &amp;amp; cmd params # OUTPUT_DIR=/data LOG=Logs index=2 LOG_DIR[0]=$OUTPUT_DIR/$LOG/Log.0 LOG_DIR[1]=$OUTPUT_DIR/$LOG/Log.1 LOG_DIR[2]=$OUTPUT_DIR/$LOG/Log.2 RM=rm MV=&amp;quot;mv&amp;quot; MKDIR=mkdir UMASK=umask #set default permission 0775 $UMASK 002 #Init the three folders i=0 while [ &amp;quot;$i&amp;quot; -le &amp;quot;$index&amp;quot; ] do $MKDIR -p ${LOG_DIR[$i]} i=$(($i+1)) done #Transfer the three folders ((i=$index-1)) $RM -r ${LOG_DIR[$index]}/* while [ &amp;quot;$i&amp;quot; -ge &amp;quot;0&amp;quot; ] do $MV ${LOG_DIR[$i]}/* ${LOG_DIR[$i+1]} i=$(($i-1)) done $RM -r ${LOG_DIR[0]}/* #start logcat service setprop service.</description>
    </item>
    
  </channel>
</rss>