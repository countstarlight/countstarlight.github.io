[
{
	"uri": "https://blog.codist.me/android/",
	"title": "Android",
	"tags": [],
	"description": "",
	"content": " Android 这里是做安卓底层（内核，驱动）遇到的一些问题和解决办法\n"
},
{
	"uri": "https://blog.codist.me/embedded/",
	"title": "Embedded",
	"tags": [],
	"description": "",
	"content": " Embedded 这里是一些做过的嵌入式相关遇到的问题和解决办法\n"
},
{
	"uri": "https://blog.codist.me/",
	"title": "Homepage",
	"tags": [],
	"description": "",
	"content": " Codist\u0026rsquo;s blog The blog of Codist, which including a list of problems and solution during development\n"
},
{
	"uri": "https://blog.codist.me/linux/",
	"title": "Linux Desktop",
	"tags": [],
	"description": "",
	"content": " Linux Desktop This is some of the needs when using the desktop Linux distribution.\n"
},
{
	"uri": "https://blog.codist.me/embedded/work6/",
	"title": "Send files via minicom",
	"tags": ["Minicom", "Linux"],
	"description": "",
	"content": "Send file  Set the file path which you should choose file from\n Press Ctrl + A , then press O\n Choose Filenames and paths\n    Set the A-Download directory (Download to PC from your device)\n Set the B-Upload directory (Upload to your device from PC), you will choose the file you want to upload from the path.\n Press esc and choose Save setup as dfl\n In minicom(embedded device\u0026rsquo;s terminal)\nrx filename  Press Ctrl + A , then press S\n Choose xmodem\n Choose your file\n  Run the file(Qt Gui) chmod a+x filename ./filename  If you don\u0026rsquo;t have a desktop environment Add -qws option:\n./filename -qws  If you want transform the display Add -display and your transform operation(Counterclockwise):\n./filename -display \u0026quot;Transformed:Rot270\u0026quot; "
},
{
	"uri": "https://blog.codist.me/embedded/work5/",
	"title": "Qt-creator cross-compliation",
	"tags": ["Qt-creator"],
	"description": "",
	"content": " 1. Get the cross compiler toolchain Because i am using the processor imx28, so i need to install arm-fsl-linux-gnueabi\n"
},
{
	"uri": "https://blog.codist.me/embedded/work4/",
	"title": "Serial-USB device on Linux",
	"tags": ["Linux", "Serial-USB"],
	"description": "",
	"content": "Install minicom sudo aptitude update sudo aptitude install minicom  Plug the device then check if system recognize the adapter sudo dmesg | grep tty  if cannot recognize, it seems to be: [ 0.000000] console [tty0] enabled [ 8.264501] systemd[1]: Created slice system-getty.slice.   Unplug the device and type lsusb. You will see a list of output similar to this:\nBus 002 Device 002: ID 8087:8000 Intel Corp. Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 001 Device 002: ID 8087:8008 Intel Corp. Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 003 Device 004: ID 13d3:5188 IMC Networks Bus 003 Device 006: ID 13d3:3402 IMC Networks Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub  Plug in the usb-Serial Port converter back, and run lsusb again, and you shall see an additional line, like this:\nBus 002 Device 002: ID 8087:8000 Intel Corp. Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 001 Device 002: ID 8087:8008 Intel Corp. Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 003 Device 004: ID 13d3:5188 IMC Networks Bus 003 Device 006: ID 13d3:3402 IMC Networks Bus 003 Device 008: ID 18f8:0f99 --- --- --- (notice the additional line!) Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub  Now we know the vendor id and the product id of the usb-Serial Port converter, this will enable us to load the linux kernel module “usbserial” to activate the device, like this :\nsudo modprobe usbserial vendor=0x18f8 product=0x0f99  Run dmesg again and you shall see lines similar like this :\nusbserial_generic 1-1:1.0: generic converter detected usb 1-1: generic converter now attached to ttyUSB0 usbcore: registered new interface driver usbserial_generic   You can instruct Linux to load this module automatically by include the line : usbserial vendor=0x18f8 product=0x0f99 inside /etc/modules file.\nIf the device is /dev/ttyUSB0  Run:\nsudo minicom -s  Go to Serial port setup and change the first line to /dev/ttyUSB0\n Save config as default with Save setup as dfl\n "
},
{
	"uri": "https://blog.codist.me/linux/work3/",
	"title": "Webcam with Linux",
	"tags": ["Linux", "Webcam"],
	"description": "",
	"content": "You want to set up your webcam with Linux, see a video stream from it and learn which applications you can use with it, right? Then this article is for you.\nSetup  plug in your webcam (typically to USB)   list your video4linux devices:\nls -ltr /dev/video*  you will find an output like this:\ncrw-rw----+ 1 root video 81, 0 Nov 11 09:06 /dev/video0   In this example your webcam device is named /dev/video0. If you have no /dev/video file, read #Troubleshooting. If you have several video4linux devices, for example a tv card your webcam may show up as /dev/video1 or whatever. But the time (in this case Nov 11 09:06) will be the time when you plugged it in.\n test the webcam\n if you have vlc installed you can start it and choose Media -\u0026gt; Open Capture Device -\u0026gt; Video device name = /dev/video0 -\u0026gt; Play if you have mplayer installed you can use the command\nmplayer tv:// -tv driver=v4l2:width=640:height=480:device=/dev/video0 -fps 30    Use it record video to capture video streams you can use cheese, a nice program with a graphical user interface. It allows you to watch and record your camera output at the same time. It stores in a strange format (.webm), but vlc can play this.\nYou can also automate video recording so you can capture the camera stream with sitting in front of the computer. To do this you can\n use the software mencoder:\nmencoder tv:// -tv driver=v4l2:width=320:height=240:device=/dev/video0 -nosound -ovc lavc -o myvideo.avi  or use the software streamer. Here are two examples:\nstreamer -c /dev/video0 -f jpeg -F stereo -o myvideo.avi -t 0:05   IP phoning  to do IP phoning, use skype under Linux.  watch it To watch your camera\u0026rsquo;s input, use cheese or mplayer:\nmplayer -fps 30 -cache 128 -tv driver=v4l2:width=640:height=480:device=/dev/video0 tv://  Or use vlc. You can run vlc as root by the way. To watch your webcam /dev/video0, start vlc and select Media -\u0026gt; Open Capture Device -\u0026gt; Video device name = /dev/video0 -\u0026gt; Play\nTroubleshooting Troubleshooting heavily depends on the distribution and version you are using. If you have done cabling correctly and a device file /dev/video* does not appear, your kernel probably does not know the hardware. In this case you may have to install the device driver separately because it may not be part of the kernel.\nSUSE Linux 11.0 and earlier This has been tested with SUSE Linux 11.0 x64 but should work with any earlier SUSE version. You will need to log in as user root. To find out what driver you need, open a console and call\nhwinfo --usb  If a Logitech Quickcam Messenger is plugged in the answer will be like:\n06: USB 00.2: 0000 Unclassified device [Created at usb.122] UDI: /org/freedesktop/Hal/devices/usb_device_46d_8da_noserial_if2 Unique ID: Eopr.vE+cdFBwClB Parent ID: uIhY.uOe2OKugI8D SysFS ID: /devices/pci0000:00/0000:00:1a.2/usb3/3-1/3-1:1.2 SysFS BusID: 3-1:1.2 Hardware Class: unknown Model: \u0026quot;Logitech QuickCam Messanger\u0026quot; Hotplug: USB Vendor: usb 0x046d \u0026quot;Logitech, Inc.\u0026quot; Device: usb 0x08da \u0026quot;QuickCam Messanger\u0026quot; Revision: \u0026quot;1.00\u0026quot; Driver: \u0026quot;snd-usb-audio\u0026quot; Driver Modules: \u0026quot;snd_usb_audio\u0026quot; Speed: 12 Mbps Module Alias: \u0026quot;usb:v046Dp08DAd0100dc00dsc00dp00ic01isc02ip00\u0026quot; Driver Info #0: Driver Status: quickcam_messenger is active Driver Activation Cmd: \u0026quot;modprobe quickcam_messenger\u0026quot; Driver Info #1: Driver Status: gspca is active Driver Activation Cmd: \u0026quot;modprobe gspca\u0026quot; Config Status: cfg=new, avail=yes, need=no, active=unknown Attached to: #20 (Hub)  This means you can install and load the webcam driver like this:\nyast -i gspcav-kmp-default modprobe gspca  Now you should see a video device:\nls /dev/video* /dev/video /dev/video0  That means you can install and start your webcam-viewer-software. We choose gqcam:\nyast -i gqcam gqcam  It works. You see a video what from what is going on in front of your webcam.\nUbuntu This has been tested with Ubuntu 8.10 x32 but should work with any Ubuntu version. Find out the driver activation command of your webcam. For this, first install the software hwinfo. Open a consoleand type:\nsudo apt-get install hwinfo  Then call hwinfo:\nhwinfo --usb  If a Logitech Quickcam Messenger is plugged in the response will be like:\n04: USB 00.2: 0000 Unclassified device [Created at usb.122] UDI: /org/freedesktop/Hal/devices/usb_device_46d_8da_noserial_if2 Unique ID: 4ajv.vE+cdFBwClB Parent ID: k4bc._Mkd+LmXb03 SysFS ID: /devices/pci0000:00/0000:00:11.0/0000:02:00.0/usb1/1-1/1-1:1.2 SysFS BusID: 1-1:1.2 Hardware Class: unknown Model: \u0026quot;Logitech QuickCam Messanger\u0026quot; Hotplug: USB Vendor: usb 0x046d \u0026quot;Logitech, Inc.\u0026quot; Device: usb 0x08da \u0026quot;QuickCam Messanger\u0026quot; Revision: \u0026quot;1.00\u0026quot; Driver: \u0026quot;snd-usb-audio\u0026quot; Driver Modules: \u0026quot;snd_usb_audio\u0026quot; Speed: 12 Mbps Module Alias: \u0026quot;usb:v046Dp08DAd0100dc00dsc00dp00ic01isc02ip00\u0026quot; Driver Info #0: Driver Status: gspca_zc3xx is active Driver Activation Cmd: \u0026quot;modprobe gspca_zc3xx\u0026quot; Config Status: cfg=new, avail=yes, need=no, active=unknown Attached to: #8 (Hub)  Activate the driver:\nsudo modprobe gspca_zc3xx  Now you should be able to see the video device:\nls /dev/video* /dev/video0  You can now test your webcam using the software cheese:\nsudo apt-get install cheese cheese  Other webcams If you have another webcam, try the above nevertheless. If it does not work, exchange the driver gspca against uvcvideo:\nyast -i uvcvideo_kmp_default modprobe uvcvideo  and start gqcam again.\nTestbed The following webcams have been found working with this tutorial:\n Logitech Quickcam messenger Philips Webcam SPC220NC  A general list of working webcams can be found at http://mxhaard.free.fr/spca5xx.html.\nThe guide has been tested with SUSE Linux 11.4 till 13.2 and Ubuntu.\nSee also  hardware http://en.opensuse.org/Webcam http://www.linux.com/feature/126186 http://ubuntulinuxhelp.com/linux-driver-for-quickcam-usb-cameras-logitech-quickcam-fusion/ http://www.goldmann.de/webcam-linux_tipp_408.html http://wiki.ubuntuusers.de/Webcam "
},
{
	"uri": "https://blog.codist.me/contact/",
	"title": "contact",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://blog.codist.me/about/",
	"title": "about",
	"tags": [],
	"description": "",
	"content": "Github: CountStarlight\nEmail: countstarlight@gmail.com\nwebsite: couuntstarlight.github.io\n"
},
{
	"uri": "https://blog.codist.me/android/work8/",
	"title": "Math Sample",
	"tags": ["example", "math"],
	"description": "",
	"content": "KaTeX can be used to generate complex math formulas server-side.\n$$ \\phi = \\frac{(1+\\sqrt{5})}{2} = 1.6180339887\\cdots $$\nAdditional details can be found on GitHub or on the Wiki.\nExample 1 If the text between $$ contains newlines it will rendered in display mode:\n$$ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi $$  $$ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi $$\nExample 2 $$ \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}} {1+\\frac{e^{-8\\pi}} {1+\\cdots} } } } $$  ​​$$ \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}} {1+\\frac{e^{-8\\pi}} {1+\\cdots} } } } $$ ​​\nExample 3 $$ 1 + \\frac{q^2}{(1-q)}+\\frac{q^6}{(1-q)(1-q^2)}+\\cdots = \\prod_{j=0}^{\\infty}\\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}, \\quad\\quad \\text{for }\\lvert q\\rvert\u0026lt;1. $$  $$ 1 + \\frac{q^2}{(1-q)}+\\frac{q^6}{(1-q)(1-q^2)}+\\cdots = \\prod_{j=0}^{\\infty}\\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}, \\quad\\quad \\text{for }\\lvert q\\rvert\u0026lt;1. $$\n"
},
{
	"uri": "https://blog.codist.me/contact/",
	"title": "Get in touch",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://blog.codist.me/about/",
	"title": "About me",
	"tags": [],
	"description": "",
	"content": "Github: CountStarlight\nEmail: countstarlight@gmail.com\nWebsite: countstarlight.github.io\n"
},
{
	"uri": "https://blog.codist.me/android/work2/",
	"title": "Android&#39;s selinux",
	"tags": ["Android", "selinux"],
	"description": "",
	"content": "一、适用情景 当在init.rc中新增service：\nservice ro_isn /system/bin/isn.sh class late_start user root Oneshot\nkernel log会打印以下log：\nWarning! Service ro_isn needs a SELinux domain defined; please fix!\n这是因为Service ro_isn没有在SELinux的监控之下，这种情况会提示你定义一个SELinux。\n在这种情况下，你可以：\n1.无视该条log，Service功能不受影响。各种权限不受限制。但是这样做会有风险。\n2.为Service ro_isn定义一个SELinux domain，仅添加需要的权限，未允许的权限操作会被拒绝。具体方法请参照下节。\n二、解决方法 1.在devices/…/sepolicy/目录下新增ro_isn.te文件，内容如下：\ntype ro_isn, domain; type ro_isn_exec, exec_type, file_type;  2.在devices/…/sepolicy/Android.mk中添加ro_isn.te文件，内容如下：\nBOARD_SEPOLICY_UNION := ... hostapd.te ro_isn.te  3.在devices/…/sepolicy/file_contexts中增加如下内容：\n################################### #System files # ... /system/vendor/bin/slim_ap_daemon u:object_r:location_exec:s0 /system/bin/isn.sh u:object_r:ro_isn_exec:s0  4.在device/\u0026hellip;/sepolicy/service_contexts中添加：\nservicename u:object_r:ro_isn_service:s0  5.在init.rc中service ro_isn下添加:\nsecure context by seclabel service ro_isn /system/bin/isn.sh class late_start user root oneshot seclabel u:r:ro_isn:s0  6.编译并烧录bootimage\n 如果编译不成功，失败原因如下：\nError while expanding policy libsepol.check_assertion_helper: neverallow on line 233 of external/sepolicy/domain.te (or line 5194 of policy.conf) violated by allow ro_isn system_file:file { entrypoint }; make: *** [out/target/product/msm8226/obj/ETC/sepolicy_intermediates/sepolicy] 错误 1   这是因为系统在domain.te中定义了全局的neverallow策略，与ro_isn.te中allow的策略有冲突：\nallow ro_isn system_file:file { entrypoint }; neverallow domain { file_type -exec_type }:file entrypoint;  请确定自己的service有必要需要这个权限。如无必要，请在自己的code中删除掉相关操作；如必要，可以在external/sepolicy/domain.te中冲突的neverallow语句中添加自己为例外：\nneverallow { domain -ro_isn } { file_type -exec_type }:file entrypoint;   在service ro_isn运行时，出现关于“ro_isn”的avc: denied log\n\u0026lt;6\u0026gt;[ 13.547188](CPU:0-pid:320:logd.auditd) type=1400 audit(17468992.410:7): avc: denied { entrypoint } for pid=272 comm=\u0026quot;init\u0026quot; path=\u0026quot;/system/bin/isn.sh\u0026quot; dev=\u0026quot;mmcblk0p38\u0026quot; ino=631 scontext=u:r:ro_isn:s0 tcontext=u:object_r:system_file:s0 tclass=file   a.按照如下规则在ro_isn.te添加权限\nSELinux规则语句一般如下： allow A B:C D; 可以从log中分别获取ABCD四个参数。\n比如这行warning log：\navc: denied { entrypoint } for pid=272 comm=\u0026quot;init\u0026quot; path=\u0026quot;/system/bin/isn.sh\u0026quot; dev=\u0026quot;mmcblk0p38\u0026quot; ino=631 scontext=u:r:ro_isn:s0 tcontext=u:object_r:system_file:s0 tclass=file  那么我们就得出最后的规则是：\nallow qcomsysd block_device:dir { search }; allow ro_isn system_file:file { entrypoint };  重复该步骤,直到没有关于“ro_isn”的avc: denied log\n"
},
{
	"uri": "https://blog.codist.me/android/work1/",
	"title": "Android system log",
	"tags": ["Android", "log"],
	"description": "",
	"content": " 首先，在产品目录的init.XXX.rc文件中，添加相应的service，\n#start log service start logd on property:service.logcat.enable=1 start logcat_service on property:service.logcat.enable=0 stop logcat_service #log services service logcat_service /system/bin/logcat -b system -b events -b main -b radio -k -n 10 -v threadtime -r5000 -f /data/Logs/Log.0/logcat.log user root group log system class main disabled service logd /system/bin/sh /system/bin/logd.sh user system group log oneshot  然后，在目标平台的system/bin下添加脚本文件logd.sh，处理存储的log日志，以及设置属性，开启logcat_service,\n#!/system/bin/sh # #Global folder \u0026amp; cmd params # OUTPUT_DIR=/data LOG=Logs index=2 LOG_DIR[0]=$OUTPUT_DIR/$LOG/Log.0 LOG_DIR[1]=$OUTPUT_DIR/$LOG/Log.1 LOG_DIR[2]=$OUTPUT_DIR/$LOG/Log.2 RM=rm MV=\u0026quot;mv\u0026quot; MKDIR=mkdir UMASK=umask #set default permission 0775 $UMASK 002 #Init the three folders i=0 while [ \u0026quot;$i\u0026quot; -le \u0026quot;$index\u0026quot; ] do $MKDIR -p ${LOG_DIR[$i]} i=$(($i+1)) done #Transfer the three folders ((i=$index-1)) $RM -r ${LOG_DIR[$index]}/* while [ \u0026quot;$i\u0026quot; -ge \u0026quot;0\u0026quot; ] do $MV ${LOG_DIR[$i]}/* ${LOG_DIR[$i+1]} i=$(($i-1)) done $RM -r ${LOG_DIR[0]}/* #start logcat service setprop service.logcat.enable 1 mkdir /data/www cp -R /system/var/www/ /data/ ln -s /storage/external/ /data/www/sdcard  "
},
{
	"uri": "https://blog.codist.me/tags/android/",
	"title": "Android",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://blog.codist.me/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://blog.codist.me/tags/example/",
	"title": "Example",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://blog.codist.me/tags/linux/",
	"title": "Linux",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://blog.codist.me/tags/log/",
	"title": "Log",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://blog.codist.me/tags/math/",
	"title": "Math",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://blog.codist.me/tags/minicom/",
	"title": "Minicom",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://blog.codist.me/tags/qt-creator/",
	"title": "Qt Creator",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://blog.codist.me/tags/selinux/",
	"title": "Selinux",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://blog.codist.me/tags/serial-usb/",
	"title": "Serial Usb",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://blog.codist.me/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://blog.codist.me/tags/webcam/",
	"title": "Webcam",
	"tags": [],
	"description": "",
	"content": ""
}]