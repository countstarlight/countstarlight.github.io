[
{
	"uri": "https://countstarlight.github.io/en/android/",
	"title": "Android",
	"tags": [],
	"description": "",
	"content": " Android 这里是做安卓底层（内核，驱动）遇到的一些问题和解决办法\n"
},
{
	"uri": "https://countstarlight.github.io/en/embedded/",
	"title": "Embedded",
	"tags": [],
	"description": "",
	"content": " Embedded 这里是一些做过的嵌入式相关遇到的问题和解决办法\n"
},
{
	"uri": "https://countstarlight.github.io/en/",
	"title": "Homepage",
	"tags": [],
	"description": "",
	"content": " CountStarlight This is a personal blog of CountStarlight, which is a list of problems and solution during development\n"
},
{
	"uri": "https://countstarlight.github.io/en/embedded/work6/",
	"title": "Send files via minicom",
	"tags": ["Minicom", "Linux"],
	"description": "",
	"content": "Send file  Set the file path which you should choose file from\n Press Ctrl + A , then press O\n Choose Filenames and paths\n   \n Set the A-Download directory (Download to PC from your device)\n Set the B-Upload directory (Upload to your device from PC), you will choose the file you want to upload from the path.\n Press esc and choose Save setup as dfl\n In minicom(embedded device\u0026rsquo;s terminal)\n  rx filename   Press Ctrl + A , then press S Choose xmodem Choose your file  Run the file(Qt Gui) chmod a+x filename ./filename  If you don\u0026rsquo;t have a desktop environment Add -qws option:\n./filename -qws  If you want transform the display Add -display and your transform operation(Counterclockwise):\n./filename -display \u0026quot;Transformed:Rot270\u0026quot; "
},
{
	"uri": "https://countstarlight.github.io/en/embedded/work5/",
	"title": "Qt-creator cross-compliation",
	"tags": ["Qt-creator"],
	"description": "",
	"content": " 1. Get the cross compiler toolchain Because i am using the processor imx28, so i need to install arm-fsl-linux-gnueabi\n"
},
{
	"uri": "https://countstarlight.github.io/en/embedded/work4/",
	"title": "Serial-USB device on Linux",
	"tags": ["Linux", "Serial-USB"],
	"description": "",
	"content": "Install minicom sudo aptitude update sudo aptitude install minicom  Plug the device then check if system recognize the adapter \nsudo dmesg | grep tty  if cannot recognize, it seems to be: [ 0.000000] console [tty0] enabled [ 8.264501] systemd[1]: Created slice system-getty.slice.   Unplug the device and type lsusb. You will see a list of output similar to this:  Bus 002 Device 002: ID 8087:8000 Intel Corp. Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 001 Device 002: ID 8087:8008 Intel Corp. Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 003 Device 004: ID 13d3:5188 IMC Networks Bus 003 Device 006: ID 13d3:3402 IMC Networks Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub   Plug in the usb-Serial Port converter back, and run lsusb again, and you shall see an additional line, like this:  Bus 002 Device 002: ID 8087:8000 Intel Corp. Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 001 Device 002: ID 8087:8008 Intel Corp. Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 003 Device 004: ID 13d3:5188 IMC Networks Bus 003 Device 006: ID 13d3:3402 IMC Networks Bus 003 Device 008: ID 18f8:0f99 --- --- --- (notice the additional line!) Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub   Now we know the vendor id and the product id of the usb-Serial Port converter, this will enable us to load the linux kernel module “usbserial” to activate the device, like this :  sudo modprobe usbserial vendor=0x18f8 product=0x0f99   Run dmesg again and you shall see lines similar like this :  usbserial_generic 1-1:1.0: generic converter detected usb 1-1: generic converter now attached to ttyUSB0 usbcore: registered new interface driver usbserial_generic  You can instruct Linux to load this module automatically by include the line : usbserial vendor=0x18f8 product=0x0f99 inside /etc/modules file.\nIf the device is /dev/ttyUSB0  Run:  sudo minicom -s   Go to Serial port setup and change the first line to /dev/ttyUSB0 Save config as default with Save setup as dfl "
},
{
	"uri": "https://countstarlight.github.io/en/contact/",
	"title": "contact",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://countstarlight.github.io/en/about/",
	"title": "about",
	"tags": [],
	"description": "",
	"content": "Github: CountStarlight\nEmail: countstarlight@gmail.com\nwebsite: couuntstarlight.github.io\n"
},
{
	"uri": "https://countstarlight.github.io/en/contact/",
	"title": "Get in touch",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://countstarlight.github.io/en/about/",
	"title": "About me",
	"tags": [],
	"description": "",
	"content": "Github: CountStarlight\nEmail: countstarlight@gmail.com\nWebsite: countstarlight.github.io\n"
},
{
	"uri": "https://countstarlight.github.io/en/android/work1/",
	"title": "Android system log",
	"tags": ["Android", "log"],
	"description": "",
	"content": "\n 首先，在产品目录的init.XXX.rc文件中，添加相应的service，\n#start log service start logd on property:service.logcat.enable=1 start logcat_service on property:service.logcat.enable=0 stop logcat_service #log services service logcat_service /system/bin/logcat -b system -b events -b main -b radio -k -n 10 -v threadtime -r5000 -f /data/Logs/Log.0/logcat.log user root group log system class main disabled service logd /system/bin/sh /system/bin/logd.sh user system group log oneshot  然后，在目标平台的system/bin下添加脚本文件logd.sh，处理存储的log日志，以及设置属性，开启logcat_service,\n#!/system/bin/sh # #Global folder \u0026amp; cmd params # OUTPUT_DIR=/data LOG=Logs index=2 LOG_DIR[0]=$OUTPUT_DIR/$LOG/Log.0 LOG_DIR[1]=$OUTPUT_DIR/$LOG/Log.1 LOG_DIR[2]=$OUTPUT_DIR/$LOG/Log.2 RM=rm MV=\u0026quot;mv\u0026quot; MKDIR=mkdir UMASK=umask #set default permission 0775 $UMASK 002 #Init the three folders i=0 while [ \u0026quot;$i\u0026quot; -le \u0026quot;$index\u0026quot; ] do $MKDIR -p ${LOG_DIR[$i]} i=$(($i+1)) done #Transfer the three folders ((i=$index-1)) $RM -r ${LOG_DIR[$index]}/* while [ \u0026quot;$i\u0026quot; -ge \u0026quot;0\u0026quot; ] do $MV ${LOG_DIR[$i]}/* ${LOG_DIR[$i+1]} i=$(($i-1)) done $RM -r ${LOG_DIR[0]}/* #start logcat service setprop service.logcat.enable 1 mkdir /data/www cp -R /system/var/www/ /data/ ln -s /storage/external/ /data/www/sdcard  "
},
{
	"uri": "https://countstarlight.github.io/en/tags/android/",
	"title": "Android",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://countstarlight.github.io/en/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://countstarlight.github.io/en/tags/linux/",
	"title": "Linux",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://countstarlight.github.io/en/tags/log/",
	"title": "Log",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://countstarlight.github.io/en/tags/minicom/",
	"title": "Minicom",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://countstarlight.github.io/en/tags/qt-creator/",
	"title": "Qt Creator",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://countstarlight.github.io/en/tags/serial-usb/",
	"title": "Serial Usb",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://countstarlight.github.io/en/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]