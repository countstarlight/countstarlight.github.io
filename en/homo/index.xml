<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>概述 on Codist</title>
    <link>https://blog.codist.me/en/homo/</link>
    <description>Recent content in 概述 on Codist</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016-{year} Codist</copyright>
    <lastBuildDate>Thu, 13 Jun 2019 00:00:00 +0800</lastBuildDate>
    
	    <atom:link href="https://blog.codist.me/en/homo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>自定义唤醒词</title>
      <link>https://blog.codist.me/en/homo/wake-up/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0800</pubDate>
      
      <guid>https://blog.codist.me/en/homo/wake-up/</guid>
      <description></description>
    </item>
    
    <item>
      <title>安装</title>
      <link>https://blog.codist.me/en/homo/install/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0800</pubDate>
      
      <guid>https://blog.codist.me/en/homo/install/</guid>
      <description>

&lt;p&gt;首先获取Homo源码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/countstarlight/homo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开始安装依赖&lt;/p&gt;

&lt;h1 id=&#34;1-安装依赖&#34;&gt;1.安装依赖&lt;/h1&gt;

&lt;h2 id=&#34;1-1-系统依赖&#34;&gt;1.1 系统依赖&lt;/h2&gt;

&lt;h3 id=&#34;1-1-1-portaudio-和-swig&#34;&gt;1.1.1 PortAudio 和 SWIG&lt;/h3&gt;

&lt;p&gt;Homo 使用 &lt;code&gt;PortAudio&lt;/code&gt; 从音频硬件读取和处理音频，这个库通常已经被安装&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sphinxbase&lt;/code&gt; 依赖 &lt;code&gt;swig&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Debian / Ubuntu:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install portaudio19-dev swig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arch Linux / Manjaro Linux:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 需要安装 pulseaudio-alsa 使得和 pulseaudio 一起工作时不会造成崩溃
sudo pacman -S portaudio pulseaudio-alsa swig
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-1-2-webview&#34;&gt;1.1.2 WebView&lt;/h3&gt;

&lt;p&gt;Homo的图形界面实现&lt;/p&gt;

&lt;p&gt;Debian / Ubuntu:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install libwebkit2gtk-4.0-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arch Linux / Manjaro Linux:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S webkit2gtk
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-1-3-pocketsphinx&#34;&gt;1.1.3 PocketSphinx&lt;/h3&gt;

&lt;p&gt;Homo 借助 &lt;code&gt;PocketSphinx&lt;/code&gt; 实现离线唤醒，控制语音录制开始和结束的时机&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a) 安装 &lt;code&gt;sphinxbase&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PocketSphinx&lt;/code&gt; 依赖 &lt;code&gt;sphinxbase&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Linux / Unix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/cmusphinx/sphinxbase.git
cd sphinxbase
./autogen.sh
./configure
make -j 4
sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;b) 安装 &lt;code&gt;PocketSphinx&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Linux / Unix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/cmusphinx/pocketsphinx.git
cd pocketsphinx
./autogen.sh
./configure
sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-2-python依赖&#34;&gt;1.2 Python依赖&lt;/h2&gt;

&lt;p&gt;推荐使用 &lt;code&gt;virtualenv&lt;/code&gt; 为每个项目创建一个独立的python环境&lt;/p&gt;

&lt;p&gt;Python推荐使用&lt;code&gt;3.6.8&lt;/code&gt;版本&lt;/p&gt;

&lt;p&gt;目前自然语言理解和文本情感分析是两个单独的模块，稍后会合并到一起，以简化操作&lt;/p&gt;

&lt;h3 id=&#34;1-2-1-安装文本情感分析引擎的依赖&#34;&gt;1.2.1 安装文本情感分析引擎的依赖&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd homo/sentiment
# 创建一个python3.6的环境
# 需要已经安装有pyhton3.6
virtualenv --python=python3.6 env3.6
# 进入创建的环境
source env3.6/bin/activate
# 安装依赖
pip install -r requirements.txt
# 使用国内镜像
# pip install -i https://pypi.tuna.tsinghua.edu.cn/simple -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-2-2-安装自然语言理解引擎的依赖&#34;&gt;1.2.2 安装自然语言理解引擎的依赖&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd homo/nlu
# 创建一个python3.6的环境
# 需要已经安装有pyhton3.6
virtualenv --python=python3.6 env3.6
# 进入创建的环境
source env3.6/bin/activate
# 安装依赖
pip install -r requirements.txt
# 使用国内镜像
# pip install -i https://pypi.tuna.tsinghua.edu.cn/simple -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;2-编译主程序&#34;&gt;2.编译主程序&lt;/h1&gt;

&lt;p&gt;这需要你确保已经配置好&lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;开发环境:&lt;/p&gt;

&lt;p&gt;Linux:&lt;/p&gt;

&lt;p&gt;从 &lt;a href=&#34;https://golang.org/dl/&#34;&gt;https://golang.org/dl/&lt;/a&gt;下载 Linux 对应的&lt;code&gt;.tar.gz&lt;/code&gt;文件，假设下载到的是 &lt;code&gt;go1.12.6.linux-amd64.tar.gz&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 直接解压缩到 /usr/local
sudo tar -C /usr/local -xzf go1.12.6.linux-amd64.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译 &lt;code&gt;homo-webview&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd homo
# 生成资源文件
make gen
# 编译
make webview
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成的文件为：&lt;code&gt;homo-webview&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>获取数据</title>
      <link>https://blog.codist.me/en/homo/dataset/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0800</pubDate>
      
      <guid>https://blog.codist.me/en/homo/dataset/</guid>
      <description>

&lt;p&gt;获取Homo运行所需的数据&lt;/p&gt;

&lt;h2 id=&#34;1-离线唤醒部分&#34;&gt;1. 离线唤醒部分&lt;/h2&gt;

&lt;h3 id=&#34;1-1-中文语音模型&#34;&gt;1.1 中文语音模型&lt;/h3&gt;

&lt;p&gt;这里直接使用官方训练好的中文普通话模型，之后再讨论如何自己训练&lt;/p&gt;

&lt;p&gt;下载 &lt;a href=&#34;https://sourceforge.net/projects/cmusphinx/files/Acoustic%20and%20Language%20Models/Mandarin/&#34;&gt;中文(普通话)预训练语音模型&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;解压到 &lt;code&gt;homo/sphinx/cmusphinx-zh-cn-5.2&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-2-英文语音模型&#34;&gt;1.2 英文语音模型&lt;/h3&gt;

&lt;p&gt;Homo 默认使用的唤醒词是 &lt;code&gt;homo&lt;/code&gt;，需要使用英文语音模型&lt;/p&gt;

&lt;p&gt;在&lt;a href=&#34;https://blog.codist.me/en/homo/install/&#34;&gt;安装&lt;/a&gt; &lt;code&gt;PocketSphinx&lt;/code&gt; 时，&lt;code&gt;git clone&lt;/code&gt; 得到的源码里已经包含训练好的模型文件，直接将文件夹 &lt;code&gt;pocketsphinx/model/en-us&lt;/code&gt; 拷贝到 &lt;code&gt;homo/sphinx/&lt;/code&gt; 里：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp -r pocketsphinx/model/en-us homo/sphinx/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-自然语言理解部分&#34;&gt;2. 自然语言理解部分&lt;/h2&gt;

&lt;h3 id=&#34;2-1-中文维基百科mitie模型&#34;&gt;2.1 中文维基百科MITIE模型&lt;/h3&gt;

&lt;p&gt;来自 &lt;a href=&#34;http://www.crownpku.com/2017/07/27/%E7%94%A8Rasa_NLU%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AD%E6%96%87NLU%E7%B3%BB%E7%BB%9F.html&#34;&gt;用Rasa NLU构建自己的中文NLU系统 - 羊肉泡馍与糖蒜&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载 &lt;code&gt;total_word_feature_extractor_chi.dat&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;链接：https://pan.baidu.com/s/1kNENvlHLYWZIddmtWJ7Pdg 密码：p4vx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;放置到 &lt;code&gt;homo/nlu/data/rasa/total_word_feature_extractor_chi.dat&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>配置</title>
      <link>https://blog.codist.me/en/homo/config/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0800</pubDate>
      
      <guid>https://blog.codist.me/en/homo/config/</guid>
      <description>

&lt;p&gt;Homo 的示例配置文件在 &lt;code&gt;conf/example_app.ini&lt;/code&gt;，在运行前，需要拷贝一份到项目根目录下的 &lt;code&gt;app.ini&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd homo
cp conf/example_app.ini conf/app.ini
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    注意：一般情况下&lt;strong&gt;不需要&lt;/strong&gt;修改配置文件&lt;code&gt;app.ini&lt;/code&gt;，程序在每次启动时都会对未填的项用默认配置填充
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;配置文件各参数介绍&#34;&gt;配置文件各参数介绍&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[portaudio]
; PocketSphinx 将 PortAudio 录制到的原始音频(16kHz)存储在这个路径下
; 默认值: tmp/record
RAW_DIR =
; 保存用于语音识别的临时文件名
; 默认值: tmp/record/input.pcm
INPUT_RAW =
; 保存用于语音识别的临时文件编码成的wav文件名
; 默认值: tmp/record/input.wav
INPUT_WAV =

[sphinx]
; 英文 hmm 模型路径
; 默认值: sphinx/en-us/en-us
EN_HMM_DIR =
; Homo唤醒词词典路径
; 默认值: sphinx/homo/homo.dic
EN_DICT_FILE =
; Homo lm 模型路径
; 默认值: sphinx/homo/homo.lm.bin
EN_LM_FILE =
; 在PocketSphinx基础上降低开始录制用于语音识别音频的阈值，越小越灵敏
; 最小值为0，将完全由PocketSphinx控制
; 默认值: 50000
RECORD_THRESHOLD =
; 保存PocketSphinx的日志文件名
; 默认值: log/sphinx.log
LOG_FILE =

[nlu]
; Rasa NLU 对话服务的API(已弃用),
; 默认值: http://localhost:5005/conversations/default/respond
CONVERSATION_API =
; Rasa NlU进行意图识别和实体提取的API,
; 默认值: http://localhost:5000/parse
PARSE_API =
; 使用的Rasa NLU的模型所属项目
; 默认值: rasa
PROJECT =
; 使用的Rasa NLU的模型
; 默认值: ini
MODEL =

[baidu]
; 百度语音识别的API
; 默认值: http://vop.baidu.com/server_api
ASR_API =
; 百度语音合成的API
; 默认值: http://tsn.baidu.com/text2audio
TTS_API =
; 百度语音平台的认证API
; 默认值: https://openapi.baidu.com/oauth/2.0/token
VOICE_AUTH_URL =
; 百度语音API的key
; 由于免费API有并发限制，建议自己注册
; 默认值: MDNsII2jkUtbF729GQOZt7FS
VOICE_API_KEY =
; 百度语音API的secret
; 由于免费API有并发限制，建议自己注册
; 默认值: 0vWCVCLsbWHMSH1wjvxaDq4VmvCZM2O9
VOICE_API_SECRET =

[tts]
; 保存合成的临时语音文件的目录
; 默认值: tmp/tts
TTS_DIR =
; 保存合成的临时语音文件名
; 默认值: tmp/tts/tmp.wav
TTS_OUT_FILE =
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>运行</title>
      <link>https://blog.codist.me/en/homo/run/</link>
      <pubDate>Fri, 14 Jun 2019 00:00:00 +0800</pubDate>
      
      <guid>https://blog.codist.me/en/homo/run/</guid>
      <description>

&lt;h2 id=&#34;1-运行自然语言理解引擎&#34;&gt;1.运行自然语言理解引擎&lt;/h2&gt;

&lt;p&gt;进入&lt;code&gt;nlu&lt;/code&gt;的文件夹，&lt;code&gt;source&lt;/code&gt;对应的python虚拟环境并启动http服务器：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd nlu
source env3.6/bin/activate

python -m rasa_nlu.server \
       -c configs/rasa/config_jieba_mitie_sklearn.yml \
       --path models
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者直接运行脚本&lt;code&gt;nlu_server.sh&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd nlu
./nlu_server.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-运行文本情感分析引擎&#34;&gt;2.运行文本情感分析引擎&lt;/h2&gt;

&lt;p&gt;进入&lt;code&gt;sentiment&lt;/code&gt;文件夹，&lt;code&gt;source&lt;/code&gt;对应的python虚拟环境并启动http服务器：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd sentiment
source env3.6/bin/activate
python server.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或直接运行脚本：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd sentiment
./server.sh 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;注意：加载word2vec模型需要花费5~7分钟时间&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-运行主程序&#34;&gt;3.运行主程序&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./homo-webview
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看帮助使用 &lt;code&gt;-h&lt;/code&gt; 或 &lt;code&gt;--help&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./homo-webview -h
NAME:
   Homo Webview - Help

USAGE:
   homo-webview [global options] command [command options] [arguments...]

VERSION:
   0.0.1

COMMANDS:
     help, h  Shows a list of commands or help for one command

GLOBAL OPTIONS:
   --debug, -d      start homo webview in debug mode [$HOMO_WEBVIEW_DEBUG]
   --offline, -o    disable speech recognition and text to speech [$HOMO_WEBVIEW_OFFLINE]
   --fall, -f       disable wakeup [$HOMO_WEBVIEW_FALL]
   --interrupt, -i  can interrupt the playing voice [$HOMO_WEBVIEW_INTERRUPT]
   --help, -h       show help
   --version, -v    print the version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所有参数均可以叠加使用，如 &lt;code&gt;./homo-webview -o -f -d&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-1-离线模式&#34;&gt;3.1 离线模式&lt;/h3&gt;

&lt;p&gt;使用 &lt;code&gt;-o&lt;/code&gt; 或 &lt;code&gt;--offline&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./homo-webview -o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该模式下完全不需要网络，语音识别和语音合成功能关闭，只能通过键入文本交互&lt;/p&gt;

&lt;h3 id=&#34;3-2-无唤醒模式&#34;&gt;3.2 无唤醒模式&lt;/h3&gt;

&lt;p&gt;使用 &lt;code&gt;-f&lt;/code&gt; 或 &lt;code&gt;--fall&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./homo-webview -f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该模式下不需要唤醒，直接启动界面&lt;/p&gt;

&lt;h3 id=&#34;3-3-调试模式&#34;&gt;3.3 调试模式&lt;/h3&gt;

&lt;p&gt;使用 &lt;code&gt;-d&lt;/code&gt; 或 &lt;code&gt;--debug&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./homo-webview -d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在该模式下，将会输出更为详细的日志信息，包括函数所在的代码文件和行号&lt;/p&gt;

&lt;p&gt;界面右键可以调用控制台查看和调试html和js/css&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
